import React, { useState, useRef, useEffect } from "react";
import {
  Home,
  Building2,
  DollarSign,
  MapPin,
  FileText,
  Upload,
  Image,
  Check,
  ChevronRight,
} from "lucide-react";
import TopNavigationBar from "../Dashboard/TopNavigationBar";
import { useNavigate } from "react-router-dom";

export default function PropertyListingForm() {
  const [currentStep, setCurrentStep] = useState(0);
  const [formData, setFormData] = useState({
    address: "",
    propertyType: "",
    bedrooms: "",
    bathrooms: "",
    totalArea: "",
    layoutFeatures: "",
    appliances: [],
    conditionAge: "",
    renovations: "",
    parking: "",
    outdoorSpace: "",
    monthlyRent: "",
    leaseTerm: "",
    securityDeposit: "",
    otherFees: "",
    utilities: [],
    tenantRequirements: "",
    moveInDate: "",
    neighborhoodVibe: "",
    transportation: "",
    localAmenities: "",
    communityFeatures: [],
    petPolicy: "",
    smokingPolicy: "",
    maintenance: "",
    insurance: "",
  });
  const [images, setImages] = useState([]);
  const imageInputRef = useRef();

  const steps = [
    { title: "Property Details", icon: Home, color: "#003366" },
    { title: "Pricing", icon: DollarSign, color: "#00A79D" },
    { title: "Location", icon: MapPin, color: "#4A6A8A" },
    { title: "Policies", icon: FileText, color: "#22D3EE" },
    { title: "Photos", icon: Image, color: "#00A79D" },
  ];

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    if (type === "checkbox") {
      const array = formData[name] || [];
      setFormData({
        ...formData,
        [name]: checked ? [...array, value] : array.filter((v) => v !== value),
      });
    } else {
      setFormData({ ...formData, [name]: value });
    }
  };

  const handleImageUpload = (e) => {
    const files = Array.from(e.target.files);
    const newImages = files.map((f) => ({
      file: f,
      url: URL.createObjectURL(f),
    }));
    setImages((prev) => [...prev, ...newImages]);
  };

  const handleNext = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handlePrev = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleSubmit = async () => {
    try {
      const form = new FormData();
      Object.entries(formData).forEach(([key, value]) => {
        if (Array.isArray(value)) {
          value.forEach((v) => form.append(`${key}[]`, v));
        } else if (value !== undefined && value !== null) {
          form.append(key, value);
        }
      });

      images.forEach((imgObj) => {
        if (imgObj.file) form.append("images", imgObj.file);
      });

      // Determine endpoint based on purpose
      const url =
        formData.purpose === "Sale"
          ? "http://localhost:2000/api/sale-properties"
          : "http://localhost:2000/api/properties";

      const res = await fetch(url, {
        method: "POST",
        body: form,
        credentials: "include",
      });

      if (res.ok) {
        alert("✅ Property successfully submitted!");
        // Optionally reset form or navigate
      } else {
        const err = await res.json();
        alert("❌ Submission failed: " + (err.message || res.statusText));
      }
    } catch (error) {
      alert("❌ Submission failed: " + error.message);
    }
  };

  const containerStyle = {
    minHeight: "100vh",
    backgroundColor: "#F4F7F9",
    padding: "0",
  };

  // const headerStyle = {
  //   backgroundColor: '#003366',
  //   padding: '20px 40px',
  //   display: 'flex',
  //   justifyContent: 'space-between',
  //   alignItems: 'center',
  //   boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
  // };
  // const logoStyle = {
  //   color: '#FFFFFF',
  //   fontSize: '28px',
  //   fontWeight: '800',
  //   display: 'flex',
  //   alignItems: 'center',
  //   gap: '10px'
  // };
  // const headerButtonStyle = {
  //   backgroundColor: 'transparent',
  //   border: '2px solid #FFFFFF',
  //   color: '#FFFFFF',
  //   padding: '10px 24px',
  //   borderRadius: '6px',
  //   fontSize: '14px',
  //   fontWeight: '600',
  //   cursor: 'pointer',
  //   transition: 'all 0.3s'
  // };

  const mainContentStyle = {
    display: "flex",
    maxWidth: "1400px",
    margin: "0 auto",
    padding: "40px 20px",
    gap: "30px",
  };

  const sidebarStyle = {
    width: "280px",
    flexShrink: 0,
  };

  const sidebarCardStyle = {
    backgroundColor: "#FFFFFF",
    borderRadius: "12px",
    padding: "25px",
    boxShadow: "0 2px 12px rgba(0,51,102,0.08)",
    marginBottom: "20px",
  };

  const sidebarTitleStyle = {
    fontSize: "16px",
    fontWeight: "700",
    color: "#003366",
    marginBottom: "20px",
  };

  const stepItemStyle = (index) => ({
    display: "flex",
    alignItems: "center",
    gap: "12px",
    padding: "12px",
    borderRadius: "8px",
    marginBottom: "8px",
    cursor: "pointer",
    backgroundColor: currentStep === index ? "#F4F7F9" : "transparent",
    transition: "all 0.3s",
    border:
      currentStep === index ? "2px solid #00A79D" : "2px solid transparent",
  });

  const stepIconStyle = (index) => ({
    width: "36px",
    height: "36px",
    borderRadius: "50%",
    backgroundColor:
      currentStep === index
        ? steps[index].color
        : currentStep > index
        ? "#00A79D"
        : "#E5E7EB",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    flexShrink: 0,
  });

  const stepTextStyle = (index) => ({
    fontSize: "14px",
    fontWeight: currentStep === index ? "700" : "500",
    color: currentStep === index ? "#003366" : "#4A6A8A",
  });

  const formAreaStyle = {
    flex: 1,
    backgroundColor: "#FFFFFF",
    borderRadius: "12px",
    padding: "40px",
    boxShadow: "0 2px 12px rgba(0,51,102,0.08)",
  };

  const formTitleStyle = {
    fontSize: "32px",
    fontWeight: "800",
    color: "#003366",
    marginBottom: "10px",
  };

  const formSubtitleStyle = {
    fontSize: "16px",
    color: "#4A6A8A",
    marginBottom: "40px",
  };

  const inputLabelStyle = {
    display: "block",
    fontSize: "14px",
    fontWeight: "600",
    color: "#333333",
    marginBottom: "8px",
  };

  const inputStyle = {
    width: "100%",
    padding: "12px 16px",
    border: "2px solid #E5E7EB",
    borderRadius: "8px",
    fontSize: "15px",
    outline: "none",
    transition: "all 0.3s",
    boxSizing: "border-box",
    fontFamily: "inherit",
  };

  const textareaStyle = {
    ...inputStyle,
    resize: "vertical",
    minHeight: "100px",
  };

  const gridStyle = {
    display: "grid",
    gridTemplateColumns: "repeat(2, 1fr)",
    gap: "20px",
    marginBottom: "25px",
  };

  const fieldStyle = {
    marginBottom: "25px",
  };

  const checkboxGroupStyle = {
    display: "flex",
    flexWrap: "wrap",
    gap: "15px",
  };

  const checkboxLabelStyle = {
    display: "flex",
    alignItems: "center",
    gap: "8px",
    cursor: "pointer",
    padding: "8px 12px",
    borderRadius: "6px",
    border: "2px solid #E5E7EB",
    transition: "all 0.3s",
  };

  const buttonContainerStyle = {
    display: "flex",
    justifyContent: "space-between",
    marginTop: "40px",
    paddingTop: "30px",
    borderTop: "2px solid #F4F7F9",
  };

  const buttonStyle = (variant) => ({
    padding: "14px 32px",
    borderRadius: "8px",
    fontSize: "16px",
    fontWeight: "700",
    border: "none",
    cursor: "pointer",
    transition: "all 0.3s",
    display: "inline-flex",
    alignItems: "center",
    gap: "8px",
    backgroundColor: variant === "primary" ? "#00A79D" : "#FFFFFF",
    color: variant === "primary" ? "#FFFFFF" : "#4A6A8A",
    border: variant === "secondary" ? "2px solid #E5E7EB" : "none",
  });

  const uploadAreaStyle = {
    border: "3px dashed #00A79D",
    borderRadius: "12px",
    padding: "40px",
    textAlign: "center",
    backgroundColor: "#F4F7F9",
    transition: "all 0.3s",
    cursor: "pointer",
  };

  const uploadedImagesStyle = {
    display: "grid",
    gridTemplateColumns: "repeat(4, 1fr)",
    gap: "15px",
    marginTop: "25px",
  };

  const uploadedImageStyle = {
    width: "100%",
    height: "150px",
    objectFit: "cover",
    borderRadius: "8px",
    border: "2px solid #E5E7EB",
  };
  const [user, setUser] = useState(null);
  const navigate = useNavigate();

  const handleLogout = async () => {
    await fetch("http://localhost:2000/auth/logout", {
      method: "POST",
      credentials: "include",
    });
    setUser(null);
    navigate("/login");
  };

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const res = await fetch("http://localhost:2000/auth/me", {
          method: "GET",
          credentials: "include",
        });
        const data = await res.json();
        if (res.ok) setUser(data);
      } catch (err) {
        console.error("Error fetching user:", err);
      }
    };
    fetchUser();
  }, []);

  const navItems = [
    "For Buyers",
    "For Tenants",
    "For Owners",
    "For Dealers / Builders",
    "Insights",
  ];

  const renderStepContent = () => {
    switch (currentStep) {
      case 0:
        return (
          <div>
            <h2 style={formTitleStyle}>Property Details</h2>
            <p style={formSubtitleStyle}>
              Tell us about your property's basic information
            </p>

            <div style={fieldStyle}>
              <label style={inputLabelStyle}>Property Address *</label>
              <input
                type="text"
                name="address"
                value={formData.address}
                onChange={handleChange}
                placeholder="Enter complete address"
                style={inputStyle}
                onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
              />
            </div>

            <div style={gridStyle}>
              <div>
                <label style={inputLabelStyle}>Property Type *</label>
                <select
                  name="propertyType"
                  value={formData.propertyType}
                  onChange={handleChange}
                  style={inputStyle}
                  onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                  onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
                >
                  <option value="">Select type</option>
                  <option value="house">House</option>
                  <option value="apartment">Apartment</option>
                  <option value="condo">Condo</option>
                  <option value="townhouse">Townhouse</option>
                  <option value="villa">Villa</option>
                </select>
              </div>
              <div>
                <label style={inputLabelStyle}>Purpose *</label>
                <select
                  name="purpose"
                  value={formData.purpose}
                  onChange={handleChange}
                  style={inputStyle}
                  onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                  onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
                >
                  <option value="">Select type</option>
                  <option value="Rent">Rent</option>
                  <option value="Sale">Sale</option>
                </select>
              </div>

              <div>
                <label style={inputLabelStyle}>Total Area (sqft) *</label>
                <input
                  type="number"
                  name="totalArea"
                  value={formData.totalArea}
                  onChange={handleChange}
                  placeholder="e.g., 1200"
                  style={inputStyle}
                  onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                  onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
                />
              </div>
            </div>

            <div style={gridStyle}>
              <div>
                <label style={inputLabelStyle}>Bedrooms *</label>
                <input
                  type="number"
                  name="bedrooms"
                  value={formData.bedrooms}
                  onChange={handleChange}
                  placeholder="e.g., 3"
                  style={inputStyle}
                  onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                  onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
                />
              </div>

              <div>
                <label style={inputLabelStyle}>Bathrooms *</label>
                <input
                  type="number"
                  name="bathrooms"
                  value={formData.bathrooms}
                  onChange={handleChange}
                  placeholder="e.g., 2"
                  style={inputStyle}
                  onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                  onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
                />
              </div>
            </div>

            <div style={fieldStyle}>
              <label style={inputLabelStyle}>Key Features</label>
              <textarea
                name="layoutFeatures"
                value={formData.layoutFeatures}
                onChange={handleChange}
                placeholder="Describe what makes your property special..."
                style={textareaStyle}
                onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
              />
            </div>

            <div style={fieldStyle}>
              <label style={inputLabelStyle}>Appliances Included</label>
              <div style={checkboxGroupStyle}>
                {[
                  "Refrigerator",
                  "Stove",
                  "Dishwasher",
                  "Washer/Dryer",
                  "Microwave",
                  "Air Conditioning",
                ].map((app) => (
                  <label
                    key={app}
                    style={checkboxLabelStyle}
                    onMouseEnter={(e) =>
                      (e.currentTarget.style.borderColor = "#00A79D")
                    }
                    onMouseLeave={(e) =>
                      (e.currentTarget.style.borderColor = "#E5E7EB")
                    }
                  >
                    <input
                      type="checkbox"
                      name="appliances"
                      value={app}
                      checked={(formData.appliances || []).includes(app)}
                      onChange={handleChange}
                      style={{
                        width: "18px",
                        height: "18px",
                        cursor: "pointer",
                        accentColor: "#00A79D",
                      }}
                    />
                    <span style={{ fontSize: "14px", color: "#333333" }}>
                      {app}
                    </span>
                  </label>
                ))}
              </div>
            </div>

            <div style={gridStyle}>
              <div>
                <label style={inputLabelStyle}>Property Age</label>
                <input
                  type="text"
                  name="conditionAge"
                  value={formData.conditionAge}
                  onChange={handleChange}
                  placeholder="e.g., Built in 2015"
                  style={inputStyle}
                  onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                  onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
                />
              </div>

              <div>
                <label style={inputLabelStyle}>Parking</label>
                <input
                  type="text"
                  name="parking"
                  value={formData.parking}
                  onChange={handleChange}
                  placeholder="e.g., 2-car garage"
                  style={inputStyle}
                  onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                  onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
                />
              </div>
            </div>
          </div>
        );

      case 1:
        return (
          <div>
            <h2 style={formTitleStyle}>Pricing & Terms</h2>
            <p style={formSubtitleStyle}>
              Set your rental pricing and lease terms
            </p>

            <div style={gridStyle}>
              <div>
                <label style={inputLabelStyle}>Monthly Rent (₹) *</label>
                <input
                  type="number"
                  name="monthlyRent"
                  value={formData.monthlyRent}
                  onChange={handleChange}
                  placeholder="e.g., 50000"
                  style={inputStyle}
                  onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                  onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
                />
              </div>

              <div>
                <label style={inputLabelStyle}>Security Deposit (₹) *</label>
                <input
                  type="number"
                  name="securityDeposit"
                  value={formData.securityDeposit}
                  onChange={handleChange}
                  placeholder="e.g., 100000"
                  style={inputStyle}
                  onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                  onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
                />
              </div>
            </div>

            <div style={gridStyle}>
              <div>
                <label style={inputLabelStyle}>Lease Term *</label>
                <select
                  name="leaseTerm"
                  value={formData.leaseTerm}
                  onChange={handleChange}
                  style={inputStyle}
                  onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                  onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
                >
                  <option value="">Select term</option>
                  <option value="6">6 months</option>
                  <option value="12">12 months</option>
                  <option value="24">24 months</option>
                  <option value="flexible">Flexible</option>
                </select>
              </div>

              <div>
                <label style={inputLabelStyle}>Available From *</label>
                <input
                  type="date"
                  name="moveInDate"
                  value={formData.moveInDate}
                  onChange={handleChange}
                  style={inputStyle}
                  onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                  onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
                />
              </div>
            </div>

            <div style={fieldStyle}>
              <label style={inputLabelStyle}>Utilities Included</label>
              <div style={checkboxGroupStyle}>
                {["Electricity", "Water", "Gas", "Internet", "Maintenance"].map(
                  (util) => (
                    <label
                      key={util}
                      style={checkboxLabelStyle}
                      onMouseEnter={(e) =>
                        (e.currentTarget.style.borderColor = "#00A79D")
                      }
                      onMouseLeave={(e) =>
                        (e.currentTarget.style.borderColor = "#E5E7EB")
                      }
                    >
                      <input
                        type="checkbox"
                        name="utilities"
                        value={util}
                        checked={(formData.utilities || []).includes(util)}
                        onChange={handleChange}
                        style={{
                          width: "18px",
                          height: "18px",
                          cursor: "pointer",
                          accentColor: "#00A79D",
                        }}
                      />
                      <span style={{ fontSize: "14px", color: "#333333" }}>
                        {util}
                      </span>
                    </label>
                  )
                )}
              </div>
            </div>

            <div style={fieldStyle}>
              <label style={inputLabelStyle}>Additional Fees</label>
              <textarea
                name="otherFees"
                value={formData.otherFees}
                onChange={handleChange}
                placeholder="Mention any additional fees (application fee, pet deposit, etc.)"
                style={textareaStyle}
                onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
              />
            </div>

            <div style={fieldStyle}>
              <label style={inputLabelStyle}>Tenant Requirements</label>
              <textarea
                name="tenantRequirements"
                value={formData.tenantRequirements}
                onChange={handleChange}
                placeholder="e.g., Minimum credit score, proof of income, references..."
                style={textareaStyle}
                onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
              />
            </div>
          </div>
        );

      case 2:
        return (
          <div>
            <h2 style={formTitleStyle}>Location & Amenities</h2>
            <p style={formSubtitleStyle}>
              Highlight what makes your location special
            </p>

            <div style={fieldStyle}>
              <label style={inputLabelStyle}>Neighborhood Description</label>
              <textarea
                name="neighborhoodVibe"
                value={formData.neighborhoodVibe}
                onChange={handleChange}
                placeholder="Describe the neighborhood vibe, safety, and lifestyle..."
                style={textareaStyle}
                onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
              />
            </div>

            <div style={fieldStyle}>
              <label style={inputLabelStyle}>Transportation Access</label>
              <textarea
                name="transportation"
                value={formData.transportation}
                onChange={handleChange}
                placeholder="Mention nearby metro, bus stops, highway access..."
                style={textareaStyle}
                onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
              />
            </div>

            <div style={fieldStyle}>
              <label style={inputLabelStyle}>Local Amenities</label>
              <textarea
                name="localAmenities"
                value={formData.localAmenities}
                onChange={handleChange}
                placeholder="Schools, hospitals, shopping centers, restaurants nearby..."
                style={textareaStyle}
                onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
              />
            </div>

            <div style={fieldStyle}>
              <label style={inputLabelStyle}>Community Features</label>
              <div style={checkboxGroupStyle}>
                {[
                  "Swimming Pool",
                  "Fitness Center",
                  "Clubhouse",
                  "24/7 Security",
                  "Playground",
                  "Garden",
                  "Parking",
                ].map((feat) => (
                  <label
                    key={feat}
                    style={checkboxLabelStyle}
                    onMouseEnter={(e) =>
                      (e.currentTarget.style.borderColor = "#00A79D")
                    }
                    onMouseLeave={(e) =>
                      (e.currentTarget.style.borderColor = "#E5E7EB")
                    }
                  >
                    <input
                      type="checkbox"
                      name="communityFeatures"
                      value={feat}
                      checked={(formData.communityFeatures || []).includes(
                        feat
                      )}
                      onChange={handleChange}
                      style={{
                        width: "18px",
                        height: "18px",
                        cursor: "pointer",
                        accentColor: "#00A79D",
                      }}
                    />
                    <span style={{ fontSize: "14px", color: "#333333" }}>
                      {feat}
                    </span>
                  </label>
                ))}
              </div>
            </div>

            <div style={fieldStyle}>
              <label style={inputLabelStyle}>Outdoor Space</label>
              <input
                type="text"
                name="outdoorSpace"
                value={formData.outdoorSpace}
                onChange={handleChange}
                placeholder="e.g., Private balcony, terrace, garden"
                style={inputStyle}
                onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
              />
            </div>
          </div>
        );

      case 3:
        return (
          <div>
            <h2 style={formTitleStyle}>Policies & Rules</h2>
            <p style={formSubtitleStyle}>Set clear expectations for tenants</p>

            <div style={gridStyle}>
              <div>
                <label style={inputLabelStyle}>Pet Policy *</label>
                <select
                  name="petPolicy"
                  value={formData.petPolicy}
                  onChange={handleChange}
                  style={inputStyle}
                  onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                  onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
                >
                  <option value="">Select policy</option>
                  <option value="allowed">Pets Allowed</option>
                  <option value="not-allowed">No Pets</option>
                  <option value="restrictions">With Restrictions</option>
                  <option value="negotiable">Negotiable</option>
                </select>
              </div>

              <div>
                <label style={inputLabelStyle}>Smoking Policy *</label>
                <select
                  name="smokingPolicy"
                  value={formData.smokingPolicy}
                  onChange={handleChange}
                  style={inputStyle}
                  onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                  onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
                >
                  <option value="">Select policy</option>
                  <option value="allowed">Smoking Allowed</option>
                  <option value="not-allowed">No Smoking</option>
                  <option value="outdoor-only">Outdoor Only</option>
                </select>
              </div>
            </div>

            <div style={fieldStyle}>
              <label style={inputLabelStyle}>Insurance Requirements</label>
              <select
                name="insurance"
                value={formData.insurance}
                onChange={handleChange}
                style={inputStyle}
                onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
              >
                <option value="">Select requirement</option>
                <option value="required">Required</option>
                <option value="optional">Optional</option>
                <option value="not-required">Not Required</option>
              </select>
            </div>

            <div style={fieldStyle}>
              <label style={inputLabelStyle}>
                Maintenance Responsibilities
              </label>
              <textarea
                name="maintenance"
                value={formData.maintenance}
                onChange={handleChange}
                placeholder="Clarify maintenance responsibilities between landlord and tenant..."
                style={textareaStyle}
                onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
              />
            </div>

            <div style={fieldStyle}>
              <label style={inputLabelStyle}>Renovations History</label>
              <textarea
                name="renovations"
                value={formData.renovations}
                onChange={handleChange}
                placeholder="Recent renovations, upgrades, or improvements..."
                style={textareaStyle}
                onFocus={(e) => (e.target.style.borderColor = "#00A79D")}
                onBlur={(e) => (e.target.style.borderColor = "#E5E7EB")}
              />
            </div>
          </div>
        );

      case 4:
        return (
          <div>
            <h2 style={formTitleStyle}>Property Photos</h2>
            <p style={formSubtitleStyle}>
              Add high-quality photos to attract potential tenants
            </p>

            <div
              style={uploadAreaStyle}
              onClick={() => imageInputRef.current?.click()}
              onMouseEnter={(e) => {
                e.currentTarget.style.borderColor = "#22D3EE";
                e.currentTarget.style.backgroundColor = "#F4F7F9";
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.borderColor = "#00A79D";
                e.currentTarget.style.backgroundColor = "#F4F7F9";
              }}
            >
              <Upload
                size={48}
                color="#00A79D"
                style={{ margin: "0 auto 20px" }}
              />
              <h3
                style={{
                  color: "#003366",
                  fontSize: "20px",
                  fontWeight: "700",
                  margin: "0 0 10px 0",
                }}
              >
                Upload Property Photos
              </h3>
              <p
                style={{
                  color: "#4A6A8A",
                  fontSize: "15px",
                  margin: "0 0 20px 0",
                }}
              >
                Click to browse or drag and drop images here
              </p>
              <p style={{ color: "#4A6A8A", fontSize: "13px", margin: 0 }}>
                Supports: JPG, PNG, WEBP (Max 10MB per file)
              </p>
              <input
                type="file"
                multiple
                accept="image/*"
                onChange={handleImageUpload}
                ref={imageInputRef}
                style={{ display: "none" }}
              />
            </div>

            {images.length > 0 && (
              <div>
                <h3
                  style={{
                    color: "#003366",
                    fontSize: "18px",
                    fontWeight: "700",
                    margin: "30px 0 20px 0",
                  }}
                >
                  Uploaded Photos ({images.length})
                </h3>
                <div style={uploadedImagesStyle}>
                  {images.map((imgObj, i) => (
                    <div key={i} style={{ position: "relative" }}>
                      <img
                        src={imgObj.url}
                        alt={`Upload ${i + 1}`}
                        style={uploadedImageStyle}
                      />
                    </div>
                  ))}
                </div>
              </div>
            )}

            <div
              style={{
                marginTop: "40px",
                padding: "20px",
                backgroundColor: "#F4F7F9",
                borderRadius: "8px",
                borderLeft: "4px solid #00A79D",
              }}
            >
              <h4
                style={{
                  color: "#003366",
                  fontSize: "16px",
                  fontWeight: "700",
                  margin: "0 0 10px 0",
                }}
              >
                Photo Tips
              </h4>
              <ul
                style={{
                  color: "#4A6A8A",
                  fontSize: "14px",
                  margin: 0,
                  paddingLeft: "20px",
                }}
              >
                <li>Use natural lighting for better quality</li>
                <li>Show different angles of each room</li>
                <li>Include exterior shots and outdoor spaces</li>
                <li>Highlight key features and amenities</li>
                <li>Ensure photos are well-lit and in focus</li>
              </ul>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div style={containerStyle}>
      <TopNavigationBar
        user={user}
        handleLogout={handleLogout}
        navItems={navItems}
      />
      <div style={mainContentStyle}>
        <aside style={sidebarStyle}>
          <div style={sidebarCardStyle}>
            <h3 style={sidebarTitleStyle}>Your Progress</h3>
            {steps.map((step, index) => {
              const Icon = step.icon;
              return (
                <div
                  key={index}
                  style={stepItemStyle(index)}
                  onClick={() => setCurrentStep(index)}
                  onMouseEnter={(e) => {
                    if (currentStep !== index) {
                      e.currentTarget.style.backgroundColor = "#F9FAFB";
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (currentStep !== index) {
                      e.currentTarget.style.backgroundColor = "transparent";
                    }
                  }}
                >
                  <div style={stepIconStyle(index)}>
                    {currentStep > index ? (
                      <Check size={20} color="#FFFFFF" />
                    ) : (
                      <Icon
                        size={20}
                        color={currentStep === index ? "#FFFFFF" : "#9CA3AF"}
                      />
                    )}
                  </div>
                  <span style={stepTextStyle(index)}>{step.title}</span>
                </div>
              );
            })}
          </div>

          <div style={sidebarCardStyle}>
            <h3 style={sidebarTitleStyle}>Need Help?</h3>
            <p
              style={{
                color: "#4A6A8A",
                fontSize: "14px",
                lineHeight: "1.6",
                margin: 0,
              }}
            >
              Contact our support team for assistance with your property
              listing.
            </p>
            <button
              style={{
                ...buttonStyle("primary"),
                width: "100%",
                marginTop: "15px",
                justifyContent: "center",
              }}
            >
              Get Support
            </button>
          </div>
        </aside>

        <main style={formAreaStyle}>
          {renderStepContent()}

          <div style={buttonContainerStyle}>
            <button
              onClick={handlePrev}
              disabled={currentStep === 0}
              style={{
                ...buttonStyle("secondary"),
                opacity: currentStep === 0 ? 0.5 : 1,
                cursor: currentStep === 0 ? "not-allowed" : "pointer",
              }}
            >
              Previous
            </button>

            {currentStep < steps.length - 1 ? (
              <button
                onClick={handleNext}
                style={buttonStyle("primary")}
                onMouseEnter={(e) => {
                  e.currentTarget.style.backgroundColor = "#008C84";
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.backgroundColor = "#00A79D";
                }}
              >
                Next Step
                <ChevronRight size={20} />
              </button>
            ) : (
              <button
                onClick={handleSubmit}
                style={buttonStyle("primary")}
                onMouseEnter={(e) => {
                  e.currentTarget.style.backgroundColor = "#008C84";
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.backgroundColor = "#00A79D";
                }}
              >
                <Check size={20} />
                Submit Property
              </button>
            )}
          </div>
        </main>
      </div>
    </div>
  );
}
